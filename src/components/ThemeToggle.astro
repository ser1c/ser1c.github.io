---
// ThemeToggle.astro - Enhanced theme handling with Nepal-inspired styling
---

<button
  id="theme-toggle"
  class="theme-toggle px-3 py-1.5 rounded-md flex items-center gap-2 bg-gradient-to-r from-mountain-200 to-mountain-300 hover:from-mountain-300 hover:to-mountain-400 text-mountain-700 border border-mountain-400 transition-all duration-300 hover:scale-105"
  aria-label="Toggle color theme"
  aria-pressed="false"
  aria-live="polite"
  title="Toggle between light and dark theme"
>
  <span class="dark:hidden" aria-hidden="true">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-transform duration-300 hover:rotate-45">
      <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
    </svg>
  </span>
  <span class="hidden dark:inline" aria-hidden="true">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-transform duration-300 hover:rotate-90">
      <circle cx="12" cy="12" r="4"></circle>
      <path d="M12 2v2"></path>
      <path d="M12 20v2"></path>
      <path d="M5 5l1.5 1.5"></path>
      <path d="M17.5 17.5L19 19"></path>
      <path d="M5 19l1.5-1.5"></path>
      <path d="M17.5 6.5L19 5"></path>
      <path d="M2 12h2"></path>
      <path d="M20 12h2"></path>
    </svg>
  </span>
  <span class="text-xs dark:hidden font-medium" aria-hidden="true">Dark</span>
  <span class="text-xs hidden dark:inline font-medium" aria-hidden="true">Light</span>
  <span class="sr-only">Currently in </span>
  <span class="sr-only dark:hidden">light</span>
  <span class="sr-only hidden dark:inline">dark</span>
  <span class="sr-only"> mode</span>
</button>

<script>
  const STORAGE_KEY = 'theme';
  const DARK_PREFERENCE = '(prefers-color-scheme: dark)';
  const THEME_TRANSITIONING_CLASS = 'theme-transitioning';
  
  function getSystemThemePreference() {
    return window.matchMedia(DARK_PREFERENCE).matches;
  }

  function getCurrentTheme(): 'dark' | 'light' {
    const storedTheme = localStorage.getItem(STORAGE_KEY);
    if (storedTheme === 'dark' || storedTheme === 'light') {
      return storedTheme;
    }
    return getSystemThemePreference() ? 'dark' : 'light';
  }

  function setTheme(theme: 'dark' | 'light', updateStorage = true) {
    // Disable transitions temporarily
    document.documentElement.classList.add(THEME_TRANSITIONING_CLASS);
    
    // Update theme
    document.documentElement.classList.toggle('dark', theme === 'dark');
    if (updateStorage) {
      localStorage.setItem(STORAGE_KEY, theme);
    }
    
    // Update button state
    const toggle = document.getElementById('theme-toggle');
    if (toggle) {
      toggle.setAttribute('aria-pressed', (theme === 'dark').toString());
    }

    // Re-enable transitions after a short delay
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        document.documentElement.classList.remove(THEME_TRANSITIONING_CLASS);
      });
    });

    // Update theme-color meta tag
    const themeColor = document.querySelector('meta[name="theme-color"]');
    if (themeColor) {
      themeColor.setAttribute('content', theme === 'dark' ? '#0f172a' : '#f8fafc');
    }
  }

  // Initialize theme
  function initializeTheme() {
    const currentTheme = getCurrentTheme();
    setTheme(currentTheme, false);
  }

  // Set up event listeners
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTheme);
  } else {
    initializeTheme();
  }

  // Handle theme toggle click
  const toggle = document.getElementById('theme-toggle');
  if (toggle) {
    toggle.addEventListener('click', () => {
      const newTheme = document.documentElement.classList.contains('dark') ? 'light' : 'dark';
      setTheme(newTheme);
    });

    // Handle keyboard events
    toggle.addEventListener('keydown', (e) => {
      if (e.key === ' ' || e.key === 'Enter') {
        e.preventDefault();
        toggle.click();
      }
    });
  }

  // Listen for system theme changes
  const mediaQuery = window.matchMedia(DARK_PREFERENCE);
  mediaQuery.addEventListener('change', (e) => {
    // Only update if user hasn't set a preference
    if (!localStorage.getItem(STORAGE_KEY)) {
      setTheme(e.matches ? 'dark' : 'light', false);
    }
  });
</script>
